version: 2.1

commands:
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here  
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/14qV1F64XYqNDSAAyhW75u/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Run front-end test
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Run back-end test
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]
      # Your job code here
      - run:
          name: Scan frontend
          command: |
            # Your code here
            cd frontend
            npm install
            # Don't use the --force option with the command below in your local
            npm audit fix --audit-level=critical --force
            
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend  

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run:
          name: Scan backend
          command: |
            # Your code here
            cd backend
            npm install
            # Don't use the --force option with the command below in your local
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_ansible
      - install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints: ["	c9:40:ea:39:ca:65:dc:b0:b9:be:75:90:fc:9c:72:04"]
    # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
            

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend

            npm config delete proxy
            npm config delete http-proxy
            npm config delete https-proxy
            
            npm install --force
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/14qV1F64XYqNDSAAyhW75u/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations
          

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #      - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           cd frontend
  #           npm install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           echo $(cat frontend/.env)

  #     - persist_to_workspace:
  #           root: ~/
  #           paths:
  #             - project/frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #           cd frontend
  #           npm install
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure 
  #     - destroy-environment
  #     - revert-migrations
           
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_awscli
  #     - install_ansible
  #     - install_nodejs
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #        fingerprints: ["a4:d4:76:90:e3:ec:43:3e:7e:23:76:22:4d:79:af:f4"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-deps]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           cd backend
  #           npm install
  #     - run:
  #         name: Package Backend
  #         command: |
  #           cd backend
  #           npm run build
  #           tar -czf artifact.tar.gz dist/* package*
  #           cd ..
  #           mkdir .circleci/ansible/roles/deploy/files
  #           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #           export TYPEORM_MIGRATIONS_DIR=./migrations
  #           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #           export TYPEORM_MIGRATIONS=./migrations/*.ts
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations
  #     # - failure_notification
      

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #     - image: cimg/base:stable 
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_nodejs
  #     - install_awscli
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi 
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
  #           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Save Old Workflow ID to kvdb.io
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                     --no-paginate --output text)
  #           echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
  #           curl https://kvdb.io/14qV1F64XYqNDSAAyhW75u/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --stack-name InitialStack
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations
      

  # cleanup:
  #   docker:
  #     # Docker image here
  #     - image: cimg/base:stable
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export STACKS=($(aws cloudformation list-stacks \
  #               --query "StackSummaries[*].StackName" \
  #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/14qV1F64XYqNDSAAyhW75u/old_workflow_id)
  #           echo Old Workflow ID: $OldWorkflowID 
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export STACKS=($(aws cloudformation list-stacks \
  #               --query "StackSummaries[*].StackName" \
  #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #           echo Stack names: "${STACKS[@]}"
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/14qV1F64XYqNDSAAyhW75u/old_workflow_id)
  #           echo Old Workflow ID: $OldWorkflowID 
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]